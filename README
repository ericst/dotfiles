			  ━━━━━━━━━━━━━━━━━━━
			   ERICST'S DOTFILES

			      Eric Seuret
			  ━━━━━━━━━━━━━━━━━━━


Table of Contents
─────────────────

1. Introduction
2. Source





1 Introduction
══════════════

  Those are my dotfiles. They are supplied in the form of literate Emacs
  org-mode. The different configuration are therefore easy to follow,
  update and kept in a documented way.

  Those configuration are then tangled into stow packages. Generally,
  whenever I edit the configuration I do tangle the source by running
  `org-babel-tangle-file' on them. However, a small script `tangle.sh'
  is provided for convenience. You can therefore use it as is:

  ┌────
  │ source tangle.sh <file-to-tangle>
  └────

  The tangle script is provided as a script to be sourced because I
  sometimes will execute on GNU guix installations. It is therefore
  difficult to know in advance where bash will be located for the
  shebang. Here is the script.

  ┌────
  │ echo "Running org-babel-tangle-file on $1"
  │ \emacs --batch \
  │       --eval "(require 'org)" \
  │       --eval "(org-babel-tangle-file \"$1\")"
  └────

  It is worth noting, that each org-mode file can be tangled into
  several different files.

  One advantage of creating the files in stow packages, is to be use
  them without even having emacs installed. By simply stowing the
  necessary package:

  ┌────
  │ stow --no-folding  $package
  └────

  Using the –no-folding option ensures that I only link the files, no
  folders. That way the git repository stays clean.


2 Source
════════

  I keep one general file per tool. This file describe then the intended
  configuration and can directly be tangled as the configuration if need
  be.

  You will find those files in the *src* sub-directory.

  [Emacs.org]
        My Emacs configuration.
  [Bash.org]
        My Bash configuration. Also includes readline.
  [Git.org]
        My Git configuration.


[Emacs.org] <file:src/Emacs.org>

[Bash.org] <file:src/Bash.org>

[Git.org] <file:src/Git.org>
