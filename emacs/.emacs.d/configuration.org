#+TITLE: ericst's Emacs configuration
#+AUTHOR: Eric Seuret
#+EMAIL: hello@ericst.ch
#+OPTIONS: toc:nil num:nil

* Inspirations & References
- [[https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org][Harry R. Schwartz' Configuration]]
- [[https://github.com/daviwil/runemacs][daviwil's emacs from scratch series]]

* Ideas & Todos [0%]
- [-] Basic functionality [20%]
  - [ ] Project management with ~projectile~
  - [ ] Setup ~ivy~
  - [ ] Jumps with ~avy~
  - [ ] Take a look at ~dumb-jump~
  - [X] Configure ~flyspell~
- [ ] Fix autosave [[* Backup files and autosave]]
- [ ] Start better key binding description
- [-] Org-mode [25%]
  - [X] Org-mode UI
  - [ ] Org-mode System
  - [ ] Org-mode Capture
  - [ ] Org-mode Daily Logs
- [ ] Clean up hooks in [[* Lisp & Schemes]]
    
* Use-package
The file ~init.el~ makes sure that ~use-package~ is installed. 

This makes sure that ~use-package~ installs the package. 
It is essential to bootstrap on fresh box.
Otherwise, ~use-package~ waits until you need a package to download it,
which makes for a bad experience when starting on a new box.

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the news version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

* Personal information
#+begin_src emacs-lisp
  (setq user-full-name "Eric Seuret"
	user-mail-address "hello@ericst.ch"
	calendar-latitude 47.39144
	calendar-longitude 8.0513
	calendar-location-name "Aarau, Switzerland")
#+end_src

* General Settings
** Window and frame
We start by adapting the window by removing what we don't need.

- No startup screen
- No screaming at me (replace bell with visible flash)
- No toolbar
- No scrollbar

And we add some breathing room to the text content by increasing fringe value.
We also want to start with the frame maximized as emacs is important.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t
	visible-bell t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
#+end_src

** Edition
Text edition is important. I want to:

- Highlight the current line
- Show matching parens
- Delete and replace selected text
- Display columns number by default

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
  (show-paren-mode 1)
  (delete-selection-mode 1)
  (column-number-mode 1)
#+end_src

** Line numbers
Basically, I want line numbers to be displayed except for org and repl-type modes.

#+begin_src emacs-lisp 
  (global-display-line-numbers-mode 1)
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Backup files and autosave
Backup files are usefull, but I don't want them to clutter my working directory. 
So we pack them away in ~\~/.emacs.d/backups~

I still need to look at auto-saves.

By default auto-save are made into =/tmp=, which is okay.

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq backup-by-copying t
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)

  (setq auto-save-default t)
#+end_src

** Theme and font
I like the ~one-dark~ theme.

#+begin_src emacs-lisp
  (use-package one-themes
    :init (load-theme 'one-dark t))

  (set-face-attribute 'default nil :font "Fira Code")
#+end_src

* Core Functionality
** Flyspell
Flyspell is helpful, so we enable it also for comments.
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src

** Which-key 
~which-key~ displays some help on available key-bindings chain when in the middle.
This helps with discoverability in general.

#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src

** God mode
=god-mode= is enables a sort of modal editing capabilities for Emacs.

When enabled, it transform =C-c C-r= in =cr=.

Rules are simple when in =god-mode=:

- =x= → =C-x= (all inputs are assumed with control modifier)
- =xs= → =C-x C-s= (chaining is possible)
- =x s= → =C-x s= (using space remove the control modifier)
- =gx= → =M-x= (g is used to indicate the meta modifier)
- =Gx= → =C-M-x= (G is used for the combination of control and meta modifiers)
- =12n= → =M-12 C-n= (Digit arguments can be used)
- =uco= → =C-u C-u C-o= (Universal arguments are specified with u)

I use the =cursor-type= as an indicator when I am in =god-mode=.
If it is a hollow box, it means that I am in =god-mode=

#+begin_src emacs-lisp
  (setq-default cursor-type 'box)

  (use-package god-mode
    :bind (("<escape>" . god-local-mode))
    :config
    (defun ese/update-cursor ()
      (setq cursor-type (if (or god-local-mode buffer-read-only)
                            'hollow
                          'box)))
    (add-hook 'god-mode-enabled-hook 'ese/update-cursor)
    (add-hook 'god-mode-disabled-hook 'ese/update-cursor))
#+end_src

** Ivy
=ivy= is a completion framework for emacs. 
I bring it in via counsel.

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("C-s" . swiper))
    :init (ivy-mode 1))
#+end_src

** Company
~company~ is a general auto-complete framework.
Althought it works quite well out-of-the-box, it does need here and there some specialized backends.
Those backends are then configured as need in the languages sections.

#+begin_src emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode))
#+end_src

** Yasnippet
~yasnippet~ provides handy snippets of code. 
It needs to be loaded after company in order con be properly work with it.

#+begin_src emacs-lisp
  (use-package yasnippet
    :after company
    :config  (yas-global-mode 1))
#+end_src

** Avy
#+begin_src emacs-lisp
  (use-package avy
    :bind (("C-:" . avy-goto-char)))
#+end_src

- →** Hydra
~hydra~ allows to creat sticky key-bindings.
This is pratical to create micro-modes /à la/ vim.
Below we define a zoom hydra with an ~<f2>~ binding.

#+begin_src emacs-lisp
  (use-package hydra
    :config (defhydra hydra-zoom (global-map "<f2>")
	      "Zoom"
	      ("b" text-scale-increase "in")
	      ("s" text-scale-decrease "out")))
#+end_src

** Expand-region
~expand-region~ allows selection on steroid. 
It gradually expands the region by semantic-units. 
We do define an hydra for it.
#+begin_src emacs-lisp
  (use-package expand-region
    :after (hydra)
    :bind (("C-c e" . 'hydra-expand-region/body))
    :config (defhydra hydra-expand-region (:pre (er/expand-region 1))
              "Expand Region"
              ("e" er/expand-region "expand")
              ("c" er/contract-region "contract")))
#+end_src

* Org-mode
** UI adaptation
I want to have ~org-indent-mode~ on by default. 
I also don't want some minor adaptations to the ellipsis.

#+begin_src emacs-lisp
  (setq org-startup-indented t
        org-ellipsis "⤵")
#+end_src

=org-bullets= replaces =*= in from headers with nice bullets 
#+begin_src emacs-lisp
  (use-package org-bullets
    :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Source blocks
When editing code blocks, use the current window rather than poping open a new one.

Quickly add source blocks of emacs-lisp with ~C-c C-, el~.

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)

  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+end_src

* Languages
** Lisp & Schemes
For lisps and schemes we basically want paredit mode always on.
#+begin_src emacs-lisp
  (use-package paredit
    :init (dolist (mode '(emacs-lisp-mode-hook
                          lisp-interaction-mode-hook
                          ielm-mode-hook
                          lisp-mode-hook
                          scheme-mode-hook))
            (add-hook mode (lambda () (paredit-mode 1)))))

    (use-package geiser)
#+end_src

* Custom file
This is to keep my init.el clean. Every customization should go into ~custom.el~

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src


