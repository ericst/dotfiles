#+TITLE: ericst's Emacs configuration
#+AUTHOR: Eric Seuret
#+EMAIL: eric@ericst.ch


* Use-package
The file ~init.el~ makes sure that ~use-package~ is installed. 

This installs the MELPA repository and makes sure that ~use-package~
installs the package. It is essential to bootstrap on fresh box.
Otherwise, ~use-package~ waits until you need a package to download
it, which makes for a bad experience when starting on a new box.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  ;; Installing MELPA
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    (when no-ssl (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t))
  (package-initialize)

  ;; Bootstraping use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))

  ;; Make sure to download packages
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the news version available.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

* Personal information
Here are some basic settings such as my identity and location.
#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (setq user-full-name "Eric Seuret"
        user-mail-address "eric@ericst.ch"
        calendar-week-start-day 1
        calendar-latitude 47.39144
        calendar-longitude 8.0513
        calendar-location-name "Aarau, Switzerland")
#+end_src

* General Settings
** Org-mode
This is to make sure org-mode is loaded for the rest of the configuration. Also,
we want the last version of org-mode.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package org)
  (require 'org)
#+end_src

** Window and frame
We start by adapting the window by removing what we don't need.

- No startup screen
- No screaming at me (replace bell with visible flash)
- No toolbar
- No scroll bar

And we add some breathing room to the text content by increasing
fringe value.  We also want to start with the frame maximized as Emacs
is important.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (setq inhibit-startup-message t
	visible-bell t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
#+end_src

** Edition
Text edition is important. I want to:

- Highlight the current line
- Show matching parens
- Delete and replace selected text
- Display columns number by default

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (global-hl-line-mode 1)
  (show-paren-mode 1)
  (delete-selection-mode 1)
  (column-number-mode 1)
#+end_src

Subword allows to treat CamelCaseNames as three different words.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (global-subword-mode 1)
#+end_src

Emacs has a smart feature allowing it to redistribute breaks in paragraph to
sort of justify it. We want that to happen automatically in certain modes.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

** Line numbers
Basically, I want line numbers to be displayed except for org and repl-type
modes.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el 
  (global-display-line-numbers-mode 1)
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Backup files and autosave auto asave
Backup files are usefull, but I don't want them to clutter my working
directory. So we pack them away in ~\~/.emacs.d/backups~

I still need to look at auto-saves.

By default auto-save are made into ~/tmp~, which is okay.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq backup-by-copying t
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)

  (setq auto-save-default t)
#+end_src

** Theme and font
I like the ~one-dark~ theme.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package one-themes
    :init (load-theme 'one-light t))

  (set-face-attribute 'default nil :font "Fira Code")
#+end_src

** Scratch buffer
This makes a rather useful scratch buffer message.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (setq initial-scratch-message
	(concat ";; Welcome. This is Emacs version " emacs-version
		" with Org-mode version " org-version ".\n"
		";; Happy Hacking!\n"))
#+end_src

* Core Functionality
This section covers functionality imported by packages.
** Flyspell
Flyspell is helpful, so we enable it also for comments.
#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src
** Which-key 
~which-key~ displays some help on available key-bindings chain when in
the middle. This helps with discoverability in general.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package which-key
    :config (which-key-mode))
#+end_src

** God mode
~god-mode~ is enables a sort of modal editing capabilities for Emacs.

When enabled, it transform ~C-c C-r~ in ~cr~.

Rules are simple when in ~god-mode~:

- ~x~ → ~C-x~ (all inputs are assumed with control modifier)
- ~xs~ → ~C-x C-s~ (chaining is possible)
- ~x s~ → ~C-x s~ (using space remove the control modifier)
- ~gx~ → ~M-x~ (g is used to indicate the meta modifier)
- ~Gx~ → ~C-M-x~ (G is used for the combination of control and meta modifiers)
- ~12n~ → ~M-12 C-n~ (Digit arguments can be used)
- ~uuo~ → ~C-u C-u C-o~ (Universal arguments are specified with u)

I use the ~cursor-type~ as an indicator when I am in ~god-mode~.
If it is a hollow box, it means that I am in ~god-mode~

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (setq-default cursor-type 'box)

  (use-package god-mode
    :bind (("<escape>" . god-local-mode))
    :config
    (defun ese/update-cursor ()
      (setq cursor-type (if (or god-local-mode buffer-read-only)
                            'hollow
                          'box)))
    (add-hook 'god-mode-enabled-hook 'ese/update-cursor)
    (add-hook 'god-mode-disabled-hook 'ese/update-cursor))
#+end_src

** Ivy
~ivy~ is a completion framework for emacs. 
I bring it in via counsel.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package counsel
    :bind (("C-s" . swiper)
           ("M-x" . counsel-M-x)
           ("C-h f" . counsel-describe-function)
           ("C-h v" . counsel-describe-variable)
           ("C-x b" . ivy-switch-buffer))
    :init
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-use-selectable-prompt t)
    (setq recentf-keep '(file-remote-p file-readable-p)))
#+end_src

~ivy-rich~ improves what is displayed into the ivy selection buffer.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package ivy-rich
    :after counsel
    :init (ivy-rich-mode 1))
#+end_src

** Company
~company~ is a general auto-complete framework.  Althought it works
quite well out-of-the-box, it does need here and there some
specialized backends. Those backends are then configured as need in
the languages sections.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package company
    :hook (after-init . global-company-mode))
#+end_src

** Yasnippet
~yasnippet~ provides handy snippets of code. It needs to be loaded
after company in order con be properly work with it.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package yasnippet
    :after company
    :config  (yas-global-mode 1))
#+end_src

** Avy
Avy allows to jump to a specified character.

As I use Swiper (see Ivy), I don't really need a backward I-Search.

So let's use ~C-r~ to jump to a character.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package avy
    :bind (("C-r" . avy-goto-char)))
#+end_src

** Hydra
~hydra~ allows to create sticky key-bindings.
This is pratical to create micro-modes /à la/ vim.
Below we define a zoom hydra with an ~<f2>~ binding.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package hydra
    :config (defhydra hydra-zoom (global-map "<f2>")
	      "Zoom"
	      ("b" text-scale-increase "in")
	      ("s" text-scale-decrease "out")))
#+end_src

** Expand-region
~expand-region~ allows selection on steroid. 
It gradually expands the region by semantic-units. 
We do define an hydra for it.
#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package expand-region
    :after (hydra)
    :bind (("C-c e" . 'hydra-expand-region/body))
    :config (defhydra hydra-expand-region (:pre (er/expand-region 1))
              "Expand Region"
              ("e" er/expand-region "expand")
              ("c" er/contract-region "contract")))
#+end_src

** Project Management
~projectile~ is a project management system for Emacs. 
It provide some nice features working from the root of a project.
Among those ones:

- Jump to a file in project
- Compile project
- Kill all project buffers
- Grep through project
- ...

The project root is detected either by the presence of a vc file (git,
mercurial, ...), or a special package definition file (lein, maven,
...).  Alternatively, you can force it to be a project by creation an
empty ~.projectile~ file in the root directory.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package projectile
    :after (counsel)
    :config
    (setq projectile-completion-system 'ivy)
    (projectile-mode 1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

For proper integration with ~ivy~ we use the ~counsel-projectile~

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package counsel-projectile
    :after (counsel projectile)
    :config
    (counsel-projectile-mode t))
#+end_src

** Git porcelain
~magit~ is a user interface for git.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package magit
    :bind (("C-c g" . magit-status)))
#+end_src

** Moving Text Around
Allows using of Org-mode's ~M-↑, M-↓~ in other modes too.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
   (use-package move-text
     :config (move-text-default-bindings))
#+end_src

** Dead Keys
For some reason, dead keys don't seem to work properly on my
system. The following corrects it on starting emacs. It comes from:
[[https://www.emacswiki.org/emacs/DeadKeys][Dead Keys on Emacs Wiki]]

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (require 'iso-transl)
#+end_src

* Exocortex
Quick description of my exocortex. The idea is to free my main cortex for
usefull things and not try to keep track of everything always.

- ~~/exocortex/agenda~ :: Collection of org files used to manage
  time.
- ~~exocortex/memex/~ :: Contains permanent notes on topics. At the
  end it should look like the described method in this
  book [fn:1]. Memex stands for Memory Expander.
- ~~exocortex/skel/~ :: Contains different templates files to facilitate the use
  of my exocortex. 
- ~~exocortex/journal.org~ :: Contains a journal of events. Kind of like a
  /journal de bord/.
- ~~exocortex/archives/~ :: The idea is to keep old org files or task
  items.

** Agenda files
Places to look for agenda items.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (setq org-agenda-files '("~/exocortex/agenda"))
#+end_src

** Todo items
This is how I organize my todo keyboards items.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (setq-default org-todo-keywords
                '((sequence "TODO(t!)" "NEXT(n!)" "WAITING(w!)" "FUTURE(f!)" "|" "DONE(d!)" "CANCELED(c!)")))

  (setq org-log-into-drawer t)
#+end_src

Here is a short description of all states:

- TODO :: Self-explanatory, an item that needs doing.
- NEXT :: This item is on the NEXT list. It means that it is currently being
  working on.
- WAITING :: This means that in order to complete the task, I am waiting for
  some more information.
- FUTURE :: This is a task that doesn't need immediate action for the moment.
- DONE :: This means that the task was done an completed.
- CANCELED :: This means that the task was canceled before being done.

A note on logging. Each task records a time stamp of state transition. But
logging is made separately (via capture) on the project level. The idea is that
so the log becomes useful, but reconstruction of the task can be done quickly by
knowing what happened when.

** Capture 
This is the capture configuration. Basically, I have only two basic
templates:

1. Quick one for new tasks that go directly in the inbox
2. One that I use for logging information

The rests are here to create new projects.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (bind-key "C-c o c" 'org-capture)

  (setq org-capture-templates
        '(("t" "TODO" entry (file+olp "~/exocortex/agenda/main.org" "Inbox")
           "* TODO %?\n %i\n")
          ("l" "Log entry (current buffer)" entry (file+olp+datetree buffer-file-name "Log")
           "* %?\n %i\n")
          ("j" "Journal entry" entry (file+olp+datetree "~/exocortex/journal.org")
           "* %?\n %i\n")))
#+end_src

** Agenda
I like to keep things simple. The agenda shows scheduled tasks as well
as next tasks. Everything else is hidden.

It is only during the weekly review that I want to see per projects
all tasks.

I also have a view to use during planning with tasks that are
unscheduled and don't have any deadline. Those are good candidates to
look at during a weekly review.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
    (bind-key "C-c o a" 'org-agenda)

    (setq org-agenda-custom-commands
          '(("a" "Agenda for the current week"
             ((agenda "")
              (todo "NEXT")))
            ("u" "Unscheduled Tasks"
             ((tags-todo "-FUTURE-DEADLINE={.+}-SCHEDULED={.+}")
              (todo "NEXT")))
            ("f" "Future Tasks"
             ((todo "FUTURE")))))
#+end_src

** Refiling
I want to be able to refile anywhere in my current agenda files. It is
really important.

I also want that to be organized as a hierarchy.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (setq org-refile-use-outline-path 'file)
  (setq org-refile-targets '((nil . (:maxlevel . 4))
                             (org-agenda-files . (:maxlevel . 4))))
#+end_src

** Source blocks
When editing code blocks, use the current window rather than poping
open a new one.

Quickly add source blocks of emacs-lisp with ~C-c C-, el~.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (setq org-src-window-setup 'current-window)

  (add-to-list 'org-structure-template-alist
               '("sel" . "src emacs-lisp"))
#+end_src

General notes on my system. 

** UI adaptation
I want to have ~org-indent-mode~ on by default. 
I also don't want some minor adaptations to the ellipsis.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (setq org-startup-indented t
        org-ellipsis "⤵")
#+end_src

~org-bullets~ replaces ~*~ in from headers with nice bullets 
#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package org-bullets
    :custom (org-bullets-bullet-list '("◉" "●" "○" "▶" "▹" "●" "○" "▶" "▹" "●" "○" "▶" "▹"))
    :init 
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

* Programming
** Jumping to definitions & references
~dumb-jump~ enables "jump to definition" for more than 40 languages.
It favors a just working approach by using a grep in the background.

Adding it to x-ref allows us to search by using ~M-.~.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package dumb-jump
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src
** Lisp & Schemes
For lisps and schemes we basically want paredit mode always on.
#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package paredit
    :init (dolist (mode '(emacs-lisp-mode-hook
                          lisp-interaction-mode-hook
                          ielm-mode-hook
                          lisp-mode-hook
                          scheme-mode-hook))
            (add-hook mode (lambda () (paredit-mode 1)))))

  (use-package geiser)
#+end_src
** C#
Just the basic to be able to edit c# files.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (use-package csharp-mode)
#+end_src

* Custom file
This is to keep my init.el clean. Every customization should go into ~custom.el~

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src

* Server start
Even if I don't always use it, I like to have the server started.
It comes handy when sometimes I loose the X-Server connection on Emacs under WSL on Windows.

#+begin_src emacs-lisp :tangle ../emacs/.emacs.d/init.el
  (server-start)
#+end_src

* Desktop file
This makes for a nice integration of the server with the desktop

 #+begin_src conf-desktop :tangle ../emacs/.local/share/applications/emacs.desktop
   [Desktop Entry]
   Name=Emacs
   GenericName=Text Editor
   Comment=Edit text
   MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
   Exec=emacsclient -c -a emacs %F
   Icon=emacs
   Type=Application
   Terminal=false
   Categories=Development;TextEditor;
   StartupWMClass=Emacs
   Keywords=Text;Editor;
 #+end_src

* Inspirations & References
- [[https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org][Harry R. Schwartz' Configuration]]
- [[https://github.com/daviwil/runemacs][daviwil's emacs from scratch series]]
- [[https://github.com/alhassy/emacs.d][alhassy's A Life Configuring Emacs]]
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life in Plain Text!]]

* Footnotes

[fn:1] Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to
Boost Writing, Learning and Thinking for Students, Academics and
Nonfiction Book Writers, n.d.
 
