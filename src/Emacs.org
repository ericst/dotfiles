#+TITLE: ericst's Emacs configuration
#+AUTHOR: Eric Seuret
#+EMAIL: eric@ericst.ch

#+PROPERTY: header-args+ :comments both
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :tangle "~/.emacs.d/init.el"

* Use-package
The file ~init.el~ makes sure that ~use-package~ is installed. 

On windows, when I compile emacs with MSYS2, I end up with a weird bug
where the gnupg homedire is wrongly defined. I found the following to
correct that and allows packages to be loaded correctly.

#+begin_src emacs-lisp
  (if (memq system-type '(windows-nt ms-dos))
      (setq package-gnupghome-dir "~/.emacs.d/elpa/gnupg"))
#+end_src


This installs the MELPA repository and makes sure that ~use-package~
installs the package. It is essential to bootstrap on fresh box.
Otherwise, ~use-package~ waits until you need a package to download
it, which makes for a bad experience when starting on a new box.

#+begin_src emacs-lisp
  ;; Installing MELPA
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    (when no-ssl (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t))
  (package-initialize)

  ;; Bootstraping use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))

  ;; Make sure to download packages
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the news version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

* Personal information
Here are some basic settings such as my identity and location.
#+begin_src emacs-lisp
  (setq user-full-name "Eric Seuret"
        user-mail-address "eric@ericst.ch"
        calendar-week-start-day 1
        calendar-latitude 47.39144
        calendar-longitude 8.0513
        calendar-location-name "Aarau, Switzerland")
#+end_src

* General Settings

** Org-mode
This is to make sure org-mode is loaded for the rest of the configuration. Also,
we want the last version of org-mode.

#+begin_src emacs-lisp
  (use-package org)
  (require 'org)
#+end_src

** Window and frame
We start by adapting the window by removing what we don't need.

- No startup screen
- No screaming at me (replace bell with visible flash)
- No toolbar
- No scroll bar

And we add some breathing room to the text content by increasing
fringe value.  We also want to start with the frame maximized as Emacs
is important.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t
	visible-bell t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
#+end_src

** Edition
Text edition is important. I want to:

- Highlight the current line
- Show matching parens
- Delete and replace selected text
- Display columns number by default

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
  (show-paren-mode 1)
  (delete-selection-mode 1)
  (column-number-mode 1)
#+end_src


Emacs has a smart feature allowing it to redistribute breaks in paragraph to
sort of justify it. We want that to happen automatically in certain modes.

#+begin_src emacs-lisp
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

** Line numbers
Basically, I want line numbers to be displayed except for org and repl-type
modes.

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Backup files and autosave auto asave
Backup files are usefull, but I don't want them to clutter my working
directory. So we pack them away in ~\~/.emacs.d/backups~

I still need to look at auto-saves.

By default auto-save are made into ~/tmp~, which is okay.

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq backup-by-copying t
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)

  (setq auto-save-default t)
#+end_src

** Theme and font
I like the ~one-dark~ theme.

#+begin_src emacs-lisp
  (use-package one-themes
    :init (load-theme 'one-dark t))

  (set-face-attribute 'default nil :font "Fira Code")
#+end_src

** Scratch buffer
This makes a rather useful scratch buffer message.

#+begin_src emacs-lisp
  (setq initial-scratch-message
	(concat ";; Welcome. This is Emacs version " emacs-version
		" with Org-mode version " org-version ".\n"
		";; Happy Hacking!\n"))
#+end_src

* Core Functionality
This section covers functionality imported by packages.

** Flyspell
Flyspell is helpful, so we enable it also for comments.
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src
** Which-key 
~which-key~ displays some help on available key-bindings chain when in
the middle. This helps with discoverability in general.

#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src

** Helm
~helm~ is a completion framework for emacs. 

#+begin_src emacs-lisp
  (use-package helm
    :bind (("M-x"		.	helm-M-x)
	   ("C-x C-f"	.       helm-find-files)
	   ("C-x b"	        .       helm-buffers-list)
	   ("M-i"		.	helm-imenu))
    :init
    (helm-mode 1)
    (setq helm-mode-fuzzy-match			 t
	  helm-completion-in-region-fuzzy-match	 t))
  
#+end_src

** Company
~company~ is a general auto-complete framework.  Althought it works
quite well out-of-the-box, it does need here and there some
specialized backends. Those backends are then configured as need in
the languages sections.

#+begin_src emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode))
#+end_src

** Project Management
~projectile~ is a project management system for Emacs. 
It provide some nice features working from the root of a project.
Among those ones:

- Jump to a file in project
- Compile project
- Kill all project buffers
- Grep through project
- ...

The project root is detected either by the presence of a vc file (git,
mercurial, ...), or a special package definition file (lein, maven,
...).  Alternatively, you can force it to be a project by creation an
empty ~.projectile~ file in the root directory.

#+begin_src emacs-lisp
  (use-package projectile
    :after (helm)
    :config
    (projectile-mode 1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

** Git porcelain
~magit~ is a user interface for git.

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-c g" . magit-status)))
#+end_src

** Moving Text Around
Allows using of Org-mode's ~M-↑, M-↓~ in other modes too.

#+begin_src emacs-lisp
   (use-package move-text
     :config (move-text-default-bindings))
#+end_src

** Dead Keys
For some reason, dead keys don't seem to work properly on my
system. The following corrects it on starting emacs. It comes from:
[[https://www.emacswiki.org/emacs/DeadKeys][Dead Keys on Emacs Wiki]]

#+begin_src emacs-lisp
  (require 'iso-transl)
#+end_src

* Exocortex
Quick description of my exocortex. The idea is to free my main cortex for
usefull things and not try to keep track of everything always.

- ~~/exocortex/projects/~ :: Collection of org files used to manage
  time.
- ~~exocortex/journal.org~ :: Contains a journal of events. Kind of like a
  /journal de bord/.
- ~~exocortex/archives/~ :: The idea is to keep old org files or task
  items.

** Agenda files
Places to look for agenda items.

#+begin_src emacs-lisp
  (setq org-agenda-files '("~/exocortex/projects/"))
#+end_src

** Todo items
This is how I organize my todo keyboards items.

#+begin_src emacs-lisp
  (setq-default org-todo-keywords
                '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "FUTURE(f)" "|" "DONE(d)" "CANCELED(c)")))

  (setq org-log-into-drawer t)
#+end_src

Here is a short description of all states:

- TODO :: Self-explanatory, an item that needs doing.
- NEXT :: This item is on the NEXT list. It means that it is currently being
  working on.
- WAITING :: This means that in order to complete the task, I am waiting for
  some more information.
- FUTURE :: This is a task that doesn't need immediate action for the moment.
- DONE :: This means that the task was done an completed.
- CANCELED :: This means that the task was canceled before being done.

A note on logging. There is almost no recording of what happened when. As this
is not really useful. The logging can be done at a project level via
capture. See the capture templates below.

** Capture 
This is the capture configuration. Basically, I have only two basic
templates:

1. Quick one for new tasks that go directly in the inbox
2. One that I use for logging information
3. One for journalling. As it is something that I would like to take slowly as
   an habit.

#+begin_src emacs-lisp
  (bind-key "C-c o c" 'org-capture)

  (setq org-capture-templates
        '(("t" "TODO" entry (file+olp "~/exocortex/projects/main.org" "Inbox")
           "* TODO %?\n %i\n")
          ("l" "Log entry (current buffer)" entry (file+olp buffer-file-name "Logs")
           "* %<%Y-%m-%d> %?\n %i\n")
          ("j" "Journal entry (global)" entry (file+olp+datetree "~/exocortex/journal.org")
           "* %?\n %i\n")))
#+end_src

** Agenda
I like to keep things simple. The agenda shows scheduled tasks as well
as next tasks. Everything else is hidden.

It is only during the weekly review that I want to see per projects
all tasks.

I also have a view to use during planning with tasks that are
unscheduled and don't have any deadline. Those are good candidates to
look at during a weekly review.

#+begin_src emacs-lisp
    (bind-key "C-c o a" 'org-agenda)

    (setq org-agenda-custom-commands
          '(("a" "Agenda for the current week"
             ((agenda "")
              (todo "NEXT")))
            ("u" "Unscheduled Tasks globally"
             ((tags-todo "-FUTURE-DEADLINE={.+}-SCHEDULED={.+}")
              (todo "NEXT")))
            ("f" "Future Tasks"
             ((todo "FUTURE")))))
#+end_src

** Refiling
I want to be able to refile anywhere in my current agenda files. It is
really important.

I also want that to be organized as a hierarchy.

#+begin_src emacs-lisp
  (setq org-refile-use-outline-path 'file
        org-outline-path-complete-in-steps nil)
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 2))
                             (nil . (:maxlevel . 2))))
#+end_src

** Archiving
As I have one file per project, when I am archiving a project, I actually need
to rename it. This is not an available command in emacs, so here goes.

#+begin_src emacs-lisp
  (defun ese-move-file-and-rename-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))

  (global-set-key (kbd "C-c r") #'ese-move-file-and-rename-buffer)
#+end_src



** Source blocks
When editing code blocks, use the current window rather than poping
open a new one.

Quickly add source blocks of emacs-lisp with ~C-c C-, el~.

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)

  (add-to-list 'org-structure-template-alist
               '("sel" . "src emacs-lisp")
               '("ssc" . "src scheme")
               '("sba" . "src bash"))
#+end_src


** UI adaptation
I want to have ~org-indent-mode~ on by default. 
I also don't want some minor adaptations to the ellipsis.

#+begin_src emacs-lisp
  (setq org-startup-indented t
        org-ellipsis "⤵")
#+end_src

~org-bullets~ replaces ~*~ in from headers with nice bullets 
#+begin_src emacs-lisp
  (use-package org-bullets
    :custom (org-bullets-bullet-list '("◉" "●" "○" "▶" "▹" "●" "○" "▶" "▹" "●" "○" "▶" "▹"))
    :init 
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

* Programming

** lsp-mode
Almost every language comes with a lsp server those days. So we install
lsp-mode.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((csharp-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
#+end_src
** Jumping to definitions & references
~dumb-jump~ enables "jump to definition" for more than 40 languages.
It favors a just working approach by using a grep in the background.

Adding it to x-ref allows us to search by using ~M-.~.

#+begin_src emacs-lisp
  (use-package dumb-jump
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src
** Lisp & Schemes
For lisps and schemes we basically want paredit mode always on.
#+begin_src emacs-lisp
  (use-package paredit
    :init (dolist (mode '(emacs-lisp-mode-hook
                          lisp-interaction-mode-hook
                          ielm-mode-hook
                          lisp-mode-hook
                          scheme-mode-hook))
            (add-hook mode (lambda () (paredit-mode 1)))))

  (use-package geiser)
#+end_src
** C#
Just the basic to be able to edit c# files.

#+begin_src emacs-lisp
  (use-package csharp-mode
        :hook ((csharp-mode . lsp)))
#+end_src
** Vue
This is so that I can also develop Vue based frontends.

#+begin_src emacs-lisp
  (use-package vue-mode
    :mode "\\.vue\\'"
    :hook ((vue-mode . lsp)))
#+end_src

* Custom file
This is to keep my init.el clean. Every customization should go into ~custom.el~

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src

* Server start
Even if I don't always use it, I like to have the server started.
It comes handy when sometimes I loose the X-Server connection on Emacs under WSL on Windows.

#+begin_src emacs-lisp
  (server-start)
#+end_src

* Desktop file
This makes for a nice integration of the server with the desktop

 #+begin_src conf-desktop :tangle "~/.local/share/applications/emacs.desktop"
   [Desktop Entry]
   Name=Emacs
   GenericName=Text Editor
   Comment=Edit text
   MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
   Exec=emacsclient -c -a emacs %F
   Icon=emacs
   Type=Application
   Terminal=false
   Categories=Development;TextEditor;
   StartupWMClass=Emacs
   Keywords=Text;Editor;
 #+end_src

* Inspirations & References
- [[https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org][Harry R. Schwartz' Configuration]]
- [[https://github.com/daviwil/runemacs][daviwil's emacs from scratch series]]
- [[https://github.com/alhassy/emacs.d][alhassy's A Life Configuring Emacs]]
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life in Plain Text!]]
 
