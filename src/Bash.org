#+TITLE: ericst's Bash Configuration
#+AUTHOR: Eric Seuret
#+EMAIL: eric@ericst.ch

* Introduction
To configure bash's interactive behavior correctly, one must interact with three
configuration files. Two of them (~~/.bashrc~ and ~~/.bash_profile~) are for GNU
bash himself whereas the last one (~/.inputrc~) is for the GNU Readline library
and will therefore affect all programs using this library.

Bash per-default loads only one of the files. For login shells it is
~/.bash_profile~ whereas for non-login shells it is ~/.bashrc~. Of course this
has a reason. For instance environment management in guix creates sub-shells and
would have you not dirty the sub-environment if possible. Therefore
modifications that would affect such environment (e.g. to the path) should be
done only for login-shells (See [[http://guix.gnu.org/manual/en/html_node/Invoking-guix-environment.html#Invoking-guix-environment][Invoking guix-environment]] in the GNU guix
manual).

* Basics
** Readline
Readline is an important part of the interactive part of Bash. You can see my
configuration of it in [[file:Readline.org][Readline.org]].

A note here, in my Readline configuration I do bind ~C-s~ to perform incremental
search on history. This conflicts with XON/XOFF flow control, therefore I
de-activate that but only for interactive sessions.

#+begin_src bash :tangle ../bash/.bashrc
  [[ $- == *i* ]] && stty -ixon
#+end_src

** History
Mos of this is taken from the article titled [[https://sanctum.geek.nz/arabesque/better-bash-history/][Better Bash History]].

First we want to append to the history instead of rewriting it. We also want to
keep as much as possible into our history.

#+begin_src bash :tangle ../bash/.bashrc
  shopt -s histappend
  HISTFILESIZE=1000000
  HISTSIZE=1000000
#+end_src

Of course, not everything is worth saving. For instance duplicate or empty lines
are not interesting. Setting ~HISTCONTROL~ to the correct value will allow us to
not save them. Also, some commands, such as the ones used for job control or
simply listing contents of a directory, are not conveying any particular meaning

#+begin_src bash :tangle ../bash/.bashrc
  HISTCONTROL=ignoreboth
  export HISTIGNORE="exit:ls:bg:fg:jobs:history"
#+end_src

Recording not only the command but also the date at which it was recorded could
prove useful. Setting ~HISTTIMEFORMAT~ will do just that.

#+begin_src bash :tangle ../bash/.bashrc
  HISTTIMEFORMAT='%F %T '
#+end_src

Now we only need to make a small alias to search easily into the history.

#+begin_src bash :tangle ../bash/.bashrc
  alias hs="history | grep"
#+end_src

** Directory navigation
When using a shell directory navigation is important to put yourself in the
right context.

We want bash to help us as much as possible. ~autocd~ allows us to change
directory by only typing its name without even issuing the ~cd~
command. ~cdspell~ and ~dirspell~ will auto correct types.

#+begin_src bash :tangle ../bash/.bashrc
  shopt -s autocd
  shopt -s dirspell
  shopt -s cdspell
#+end_src

When you change directory, it can be cumbersome to have to get out of your
current directory to a well-known directory. Bash provides two mechanism to help
with that. The directory ~~/projects/~ is a collection my projects. Adding it to the
~CDPATH~ variable will allow me ~cd~ in any project from wherever. The option
~cdable_vars~ enable us to made variable viable ~cd~ targets.

#+begin_src bash :tangle ../bash/.bashrc
  CDPATH=".:~/projects"
  shopt -s cdable_vars
#+end_src

With the ~cdable_vars~ option set, having some bookmarks outside of the ~CDPAT~
becomes interesting.

#+begin_src bash :tangle ../bash/.bashrc
  dotfiles="$HOME/dotfiles/"
  documents="$HOME/Documents/"
  downloads="$HOME/Downloads/"
  exocortex="$HOME/exocortex/"
#+end_src

* Prompt
For my prompt, I would like to have something rather simple. Basically here are
the elements:

- user :: Always displayed, it is important
- host :: Useful for context
- directory :: Useful for context, I only need the base name.
- environment :: When I am in ~guix environment~, I would like to know it.
- return code :: displayed only if it was different than 0, otherwise it is
  useless.

** Prompt function
As I have conditionals, it my prompt, the easiest way to make sure it is printed
out correctly is to use the ~PROMPT_COMMAND~ variable from Bash.

#+begin_src bash :tangle ../bash/.bashrc

  update_prompt (){
      local return_code=$?
    
      # The user name, host & host
      PS1='\u@\h \W '


      #Guix environment, if present
      if [ -n "$GUIX_ENVIRONMENT" ]; then
          PS1+='[dev]'
      fi

      # The return code if present
      if [ $return_code != 0 ]; then
          PS1+="(${return_code})"
      fi

      #Prompt
      PS1+='\$ '  
  }

  PROMPT_COMMAND=update_prompt
#+end_src


Ideally, those would be my requirements: Have the hostname displayed only if on
a remote shell. When a command exits with a result different than zero, display
that value somehow. Changes the it whenever in guix environment...

* Applications
** Safety nets
Here are some safety nets. 

~rm~ will refuse to delete ~/~ and prompt confirmation whenever I try to delete
more than 3 files.

~mv~, ~cp~ and ~ln~ will always ask before overwriting anything.

~ch{own,mod,grp}~ won't allow me to change permissions on ~/~


#+begin_src bash :tangle ../bash/.bashrc
  alias rm='rm -I --preserve-root'

  alias mv='mv -i'
  alias cp='cp -i'
  alias ln='ln -i'
 
  alias chown='chown --preserve-root'
  alias chmod='chmod --preserve-root'
  alias chgrp='chgrp --preserve-root'
#+end_src

** Editor
My editor of choice is Emacs. Below I set environment variables to make sure
that it is correctly selected by other applications. I also set two aliases to
edit files quicker. ~e~ open Emacs whereas ~et~ opens it in a terminal.

#+begin_src bash :tangle ../bash/.bashrc
  export ALTERNATE_EDITOR=""
  export EDITOR="emacsclient -ta \"emacs -nw\""
  export VISUAL="emacsclient -na \"emacs"\"
  export GIT_EDITOR="$EDITOR"
  alias e="$VISUAL"
  alias et="$EDITOR"
#+end_src

** Guix
The following makes sure that my guix profile is correctly set.

#+begin_src bash :tangle ../bash/.bash_profile
  export GUIX_PROFILE="$HOME/.guix-profile"
  export GUIX_LOCPATH="$GUIX_PROFILE/lib/locale"
  if [ -e "$GUIX_PROFILE/etc/profile"  ]; then
      source "$GUIX_PROFILE/etc/profile"
  fi
#+end_src

** ~ls~ 
Those aliases make the ~ls~ nicer.

- ~ls~ :: output is colorized
- ~ll~ :: output use a long listing
- ~l.~ :: outputs hidden files

Adding an extra ~l~ at the end will also pipe to less

#+begin_src bash :tangle ../bash/.bashrc
  alias ls="ls --color=auto"
  alias lsl="ls --color=auto | less"
  alias ll="ls --color=auto -lh"
  alias lll="ls --color=auto -lh | less"
  alias l.="ls --color=auto -d .*"
  alias l.l="ls --color=auto -d .* | less"
#+end_src

** ~grep~
It is also nice to have colors automatically in grep.

#+begin_src bash :tangle ../bash/.bashrc
  alias grep='grep --color=auto'
#+end_src

** ~ps~ 
First an alias to display a nicer table of processes.

#+begin_src bash :tangle ../bash/.bashrc
  alias ps="ps auxf"
  alias psl="ps auxf | less"
#+end_src

I often need to look for a particular process, so being able to search for it
directly is a time saver.

#+begin_src bash :tangle ../bash/.bashrc
  alias psg="ps aux | grep -v grep | \grep -i -e VSZ -e"
#+end_src

** ~mkdir~
Per default I want to create any missing directory.

#+begin_src bash :tangle ../bash/.bashrc
alias mkdir="mkdir -pv"
#+end_src

The function ~mkcd~ is extremely useful, to create a directory and immediately
change to it.

#+begin_src bash :tangle ../bash/.bashrc
  mcd () {
      mkdir -p $1
      cd $1
  } 
#+end_src

* Bash Profile
** System profile
When working on a system, it is also a good idea to source the global definitions.

#+begin_src bash :tangle ../bash/.bash_profile
  if [ -f /etc/profile ]; then
      source /etc/profile;
  fi
#+end_src

** Bashrc
To avoid repeating ourselves, we will treat ~~/.bashrc~ as common to login
and non-login shells and source ~~/.bashrc~ into our ~~/.bash_profile~.

#+begin_src bash :tangle ../bash/.bash_profile
  if [ -f ~/.bashrc ]; then
      source ~/.bashrc;
  fi
#+end_src

** Path
On login shells we will also extend the ~PATH~ to include small scripts I might
want to write.

#+begin_src bash :tangle ../bash/.bash_profile
  export PATH="$HOME/bin:$PATH"
#+end_src

* Readline
** Introduction
Readline configuration affects a lot of programs using it. However, it is mainly
used by bash, that is why the configuration is here.

** Bell
I don't like my computer beeping, I would rather prefer a visual feedback, as it
is more discreet.

#+begin_src fundamental :tangle ../bash/.inputrc
  set bell-style visible
#+end_src

** Completion
Readline is responsible for the interactive parts of the tab completion. Here
are the settings that make for a nice experience.

- ~completion-ignore-case~ :: Perform completions in a case-insensitive way.

- ~completion-map-case~ :: Treat '-' as equivalent to '_' when looking for
  completion matches. This simplify the typing.

- ~match-hidden-files~ :: Makes completion work on hidden files without having
  to supply the . character.

- ~show-all-if-ambiguous~ :: Show immediately possible completions. I don't want
  to press Tab two-times.

#+begin_src fundamental :tangle ../bash/.inputrc
set completion-ignore-case on
set completion-map-case on
set match-hidden-files on
set show-all-if-ambiguous on
#+end_src

** Bindings
Those bindings are here to make my life a bit easier. Searching for the string
you already wrote is more useful than non-incremental search.

#+begin_src fundamental :tangle ../bash/.inputrc
Meta-p: history-substring-search-backward
Meta-n: history-substring-search-forward
#+end_src

** References

* Reference & Inspiration
- [[https://mrzool.cc/writing/sensible-bash/][Sensible Bash]]
- [[https://sanctum.geek.nz/arabesque/better-bash-history/][Better Bash History]]
- [[https://www.gnu.org/software/bash/manual/html_node/index.html][Bash Reference Manual]]
- [[https://tiswww.case.edu/php/chet/readline/readline.html][GNU Readline Library]]
