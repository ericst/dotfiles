#+TITLE: ericst's Dotfiles
#+AUTHOR: Eric Seuret
#+EMAIL: eric@ericst.ch

* Introduction
Those are my dotfiles. They are supplied in the form of literate Emacs
org-mode. The different configuration are therefore easy to follow,
update and kept in a documented way.

Those configuration are then tangled into stow packages. Generally, whenever I
edit the configuration I do tangle the source by running ~org-babel-tangle-file~
on them. However, a small script ~tangle.sh~ is provided for convenience. You
can therefore use it as is:

#+begin_src bash :tangle no
  source tangle.sh <file-to-tangle>
#+end_src

The tangle script is provided as a script to be sourced because I
sometimes will execute on GNU guix installations. It is therefore
difficult to know in advance where bash will be located for the
shebang. Here is the script.

#+begin_src bash :tangle tangle.sh
  echo "Running org-babel-tangle-file on $1"
  \emacs --batch \
        --eval "(require 'org)" \
        --eval "(org-babel-tangle-file \"$1\")"
#+end_src

It is worth noting, that each org-mode file can be tangled into
several different files.

One advantage of creating the files in stow packages, is to be use them without
even having emacs installed. By simply stowing the necessary package:

#+begin_src bash :tangle no
  stow --no-folding  $package
#+end_src

Using the --no-folding option ensures that I only link the files, no
folders. That way the git repository stays clean.

* Source
I keep one general file per tool. This file describe then the intended
configuration and can directly be tangled as the configuration if need
be.

You will find those files in the *src* sub-directory.

- [[file:src/Emacs.org][Emacs.org]] :: My Emacs configuration.
- [[file:src/Bash.org][Bash.org]] :: My Bash configuration. Also includes readline.
- [[file:src/Git.org][Git.org]] :: My Git configuration.

* Generation of README                                             :noexport:
The following code when executed with ~C-c C-c~ will export this file
as a nice README for consumption on the terminal, or display on git
websites.

#+begin_src emacs-lisp :tangle no :results silent
  (setq-local org-export-show-temporary-export-buffer 'nil)
  (org-ascii-export-as-ascii 'nil 'nil 'nil 'nil '(:ascii-charset utf-8))
  (set-buffer "*Org ASCII Export*")
  (write-file "README")
  (kill-buffer "README")
#+end_src

