#+begin_src emacs-lisp :results silent
(org-babel-tangle)
#+end_src

* Introduction
This is the Spacemacs configuration from Eric Seuret configuration. feel free to
copy it, and improve on it ;-)

it is meant to be a literate programming configuration. the idea is that to
modify this file and then export the configuration executing the code below:

#+begin_src emacs-lisp :results silent
(org-babel-tangle)
#+end_src

This will generate 4 files. Each file has a header and a small description
after.

** space-layers.el
Configuration Layers description. It will be loaded into the function
dotspacemacs/layers. As the documentation implies. You shouldn't put any user
code ther beside modifying the variables.

#+begin_src emacs-lisp :tangle space-layers.el
;; ---- !!! Warning !!! ----
;; DO NOT MODIFY THIS FILE.
;; It was tangled from the file spacemacs.org.
;; Any modifications should be done there.
;; ---- !!! Warning !!! ----
#+end_src

** space-init.el

#+begin_src emacs-lisp :tangle space-init.el
;; ---- !!! Warning !!! ----
;; DO NOT MODIFY THIS FILE.
;; It was tangled from the file spacemacs.org.
;; Any modifications should be done there.
;; ---- !!! Warning !!! ----
#+end_src

** space-uinit.el

#+begin_src emacs-lisp :tangle space-uinit.el
;; ---- !!! Warning !!! ----
;; DO NOT MODIFY THIS FILE.
;; It was tangled from the file spacemacs.org.
;; Any modifications should be done there.
;; ---- !!! Warning !!! ----
#+end_src

** space-uconfig.el

#+begin_src emacs-lisp :tangle space-uconfig.el
;; ---- !!! Warning !!! ----
;; DO NOT MODIFY THIS FILE.
;; It was tangled from the file spacemacs.org.
;; Any modifications should be done there.
;; ---- !!! Warning !!! ----
#+end_src

* Spacemacs
** User interface
*** Font
The Hack font is great.

#+begin_src emacs-lisp :tangle space-init.el
(setq-default
    ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
    ;; size to make separators look not too crappy.
    dotspacemacs-default-font '("Hack"
                            :size 21 
                            :weight normal
                            :width normal
                            :powerline-scale 1.6)
)
#+end_src

*** Themes
I tend to prefer dark themes.

#+begin_src emacs-lisp :tangle space-init.el
(setq-default
    ;; List of themes, the first of the list is loaded when spacemacs starts.
    ;; Press <SPC> T n to cycle to the next theme in the list (works great
    ;; with 2 themes variants, one dark and one light)
    dotspacemacs-themes '(
                          base16-eighties-dark
                          monokai
                          solarized-dark
                          spacemacs-dark
                          zenburn))
#+end_src

** Server
#+begin_src emacs-lisp :tangle space-init.el
(setq-default
   ;; If non nil advises quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server t
   )
#+end_src
** Other
All the rest. I should take a closer look at all this one day.

#+begin_src emacs-lisp :tangle space-init.el
(setq-default
   ;; One of `vim', `emacs' or `hybrid'. Evil is always enabled but if the
   ;; variable is `emacs' then the `holy-mode' is enabled at startup. `hybrid'
   ;; uses emacs key bindings for vim's insert mode, but otherwise leaves evil
   ;; unchanged. (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'.
   ;; (default '(recents projects))
   dotspacemacs-startup-lists '(recents projects)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m)
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil `Y' is remapped to `y$'. (default t)
   dotspacemacs-remap-Y-to-y$ t
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   ;; `find-files' (SPC f f), `find-spacemacs-file' (SPC f e s), and
   ;; `find-contrib-file' (SPC f e c) are replaced. (default nil)
   dotspacemacs-use-ido nil
   ;; If non nil, `helm' will try to miminimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-micro-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols nil
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   )
#+end_src

* General custom mappings
** Org
Some key bindings for org-mode should always be available..

| Key Binding | Description                  |
|-------------+------------------------------|
| ~SPC o c~   | Org Capture                  |


#+begin_src emacs-lisp :tangle space-uconfig.el
(evil-leader/set-key "oc" 'org-capture)
#+end_src

** Filling

This is really practical to stay within the limit of fillings. Some of those
where already mapped, but all over the place. I like to have them organized in
one place.

| Key Binding | Description                                      |
|-------------+--------------------------------------------------|
| ~SPC o f p~ | Adapt the current paragraph to given fill column |
| ~SPC o f s~ | Set the desired fill column                      |
| ~SPC o f a~ | Toggle auto fill mode                            |
| ~SPC o f i~ | Toggle fill indicator                            |

#+begin_src emacs-lisp :tangle space-uconfig.el
(spacemacs/declare-prefix "of" "Filling(Text Align)")
(evil-leader/set-key 
    "ofp" 'fill-paragraph
    "ofs" 'set-fill-column
    "ofa" 'spacemacs/toggle-auto-fill-mode
    "ofi" 'spacemacs/toggle-fill-column-indicator
)
#+end_src

* Layers and packages
** General configuration

- Distribution -> default to spacemas is okay
- No special path for layers
- No exculded packages
- Delete orphan packages to default

#+begin_src emacs-lisp :tangle space-layers.el
(setq-default 

   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'. (default t)
   dotspacemacs-delete-orphan-packages t)
#+end_src
** Installed layers
Here is a list of installed layers. If a special configuration is needed, it
will be performed below.


#+begin_src emacs-lisp :tangle space-layers.el
(setq-default
   dotspacemacs-configuration-layers
   '(
     ;;Global
     auto-completion
     git
     org
     spell-checking
     syntax-checking
     ;; Lang
     c-c++
     csharp
     python
     html
     rust
     emacs-lisp
     common-lisp
     clojure
     shell-scripts
     yaml
     latex
     asciidoc
     markdown
     ;; Apps
     games
     shell
     ;; Others
     finance
     ranger
     )
  )
#+end_src

** Extra Packages
The only extra package is the base16-theme.

#+begin_src emacs-lisp :tangle space-layers.el
(setq-default 
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '(base16-theme))
#+end_src
* Emacs
** Fill column indicator
The fill column indicator is practical to quickly see if your file violates the
80 characters rules or not. It is therfore a good idea to have it configured.

#+begin_src emacs-lisp :tangle space-uconfig.el
(setq fci-rule-column 81)
#+end_src

** Backup and auto saves
They are here only in case of emergency. So saving them in a temp directory
should be enough.

I took the next snippet from www.emacswiki.org/emacs/BackupDirectory. It should
place all auto-saves and backups in the default system temp directory.

#+begin_src emacs-lisp :tangle space-uconfig.el
(setq backup-directory-alist
    `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
    `((".*" ,temporary-file-directory t)))
#+end_src

** Mutt
We want to write emails in markdown mode. As this might help with readability.

#+begin_src emacs-lisp :tangle space-uconfig.el
(setq auto-mode-alist (append '(("/tmp/mutt.*" . markdown-mode)) auto-mode-alist))
#+end_src
* Org
Here is my configuration for org mode. It has been inspired by [[http://doc.norang.ca/org-mode.html][norang's configuration]]

** Todo Items
I have two kind of todo items. Here are their configurations.

#+begin_src emacs-lisp :tangle space-uconfig.el
(setq-default org-todo-keywords
    (quote ((sequence "TODO(t!)" "NEXT(n!)" "|" "DONE(x!)")
            (sequence "WAITING(w!)" "HOLD(h!)" "DELEGATED(d!)" "|" "CANCELLED(a!)" )
            (sequence "OPEN(o!)" "|" "CLOSED(c!)")
)))

(setq-default org-todo-keyword-faces
    (quote (("TODO" :foreground "red" :weight bold)
            ("NEXT" :foreground "cyan" :weight bold)
            ("OPEN" :foreground "cyan" :weight bold)
            ("DELEGATED" :foreground "cyan" :weight bold)
            ("WAITING" :foreground "orange" :weight bold)
            ("HOLD" :foreground "magenta" :weight bold)
            ("DONE" :foreground "forest green" :weight bold)
            ("CLOSED" :foreground "forest green" :weight bold)
            ("CANCELLED" :foreground "forest green" :weight bold)
)))
#+end_src

*** Tasks
The first type of todo items are for my personal tasks, and here is how their 
state diagram looks like.

[[file:images/todos.png]]

*** Issues
The second type of todo items is to keep track of projects issues. 

[[file:images/tasks.png]]
** Agenda
*** Files

All files under the ~\~/org/~ folder are used in the agenda view. This allows to
easily separate projects. If it grows too big, or needs special attention, just
create a new file.

#+begin_src emacs-lisp :tangle space-uconfig.el
(setq org-agenda-files (quote ("~/org/" 
                               "~/org/work/"
                               "~/org/work/notes/"
                               "~/org/work/meetings/")))
#+end_src

*** Views
Here is a list of the preset Views

| Key | Description                      |
|-----+----------------------------------|
| ~p~ | Planning View                    |
| ~i~ | List of OPEN Issues              |
| ~w~ | List of tasks WAITING or on HOLD |
| ~d~ | List of tasks DELEGATED          |

The Planning has the following elements:

1. Agenda view of the week.
2. A list of tasks that I need to refile.
3. A list of NEXT tasks.
4. A list of the remaining TODO tasks.

The other views are self-explanatory


#+begin_src emacs-lisp :tangle space-uconfig.el
(setq org-agenda-custom-commands

        '(("p" "Planning"
          ((agenda "")
            (tags "refile" ((org-agenda-overriding-header "Items to refile")))
            (todo "NEXT" ((org-agenda-overriding-header "NEXT Tasks")))
            (todo "TODO" ((org-agenda-overriding-header "TODO Tasks")))))

          ("i" "List of OPEN Issues" todo "OPEN" 
              ((org-agenda-overriding-header "OPEN Issues")))

          ("w" "List of tasks WAITING or on HOLD" todo "HOLD|WAITING" 
              ((org-agenda-overriding-header "Tasks WAITING or on HOLD")))

          ("d" "List of tasks DELEGATED" todo "DELEGATED" 
              ((org-agenda-overriding-header "Tasks DELEGATED")))
))
#+end_src
** Capture and Refiling
Everything I capture, goes to the ~\~/org/refile.org~ file. 
#+begin_src emacs-lisp :tangle space-uconfig.el
(setq org-default-notes-file "~/org/refile.org")
#+end_src

*** Capture Templates
TBD

*** Refiling
Refiling target includes this file and all org-agenda files.

#+begin_src emacs-lisp :tangle space-uconfig.el
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
#+end_src

We also want to use full paths as it is easier with helm.

#+begin_src emacs-lisp :tangle space-uconfig.el
(setq org-refile-use-outline-path t)
#+end_src
